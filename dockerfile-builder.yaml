project: 
  title: &project_title Alphasocket/dockerized-php-fpm-alpine
  codename: &project_codename php-fpm-alpine
  description: Dockerized PHP-FPM service on alpine distro

#
# Build process
# Creates dockerfile and file used in it
#
build:
  envvars:
    groups:
      main:
        id: 1082
        name: 'www-data'
    users:
      main:
        id: 1082
        name: 'www-data'
        groups: 'www-data'
    name: *project_codename
    # PHP
    php:
      version: 
        valueFromCommand: 'VERSION=$(echo "$BUILD_BRANCH" | cut -d \- -f 1); [ "$VERSION" = "latest" ] && echo 7.2 || echo $VERSION'
      fpm:
        port: '9000'
      xdebug:
        port: '9001'
    from:
      valueFromCommand: 'echo "php:${BUILD_PHP_VERSION}-fpm-alpine"'
    ports:
      main: 
        valueFromParse: $BUILD_PHP_FPM_PORT
      additional: 
        valueFromCommand: '[ "$BUILD_ENV" = "$GENERAL_KEYS_DEV" ] && echo "${BUILD_PHP_XDEBUG_PORT}" || echo ""'
    cmd: /usr/local/bin/docker-php-entrypoint php-fpm
    paths:
      templates: /usr/local/templates
  imports:
    - imports/templates:$BUILD_PATHS_TEMPLATES

#
# Setup process injected in dockerfile
#
setup:
  # Setup env 
  envvars:
    dependencies:
      setup: "binutils-libs binutils m4 perl autoconf file libgcc gmp mpfr3 gcc g++ make re2c libatomic libstdc++ libmagic libc-dev dpkg-dev libbz2 dpkg zlib-dev icu-dev"
      config: ""
      runtime: ""
    php: 
      ext: 
        curl:
          enabled: True
          dependencies: curl-dev
        gd:
          enabled: True
          dependencies: freetype freetype-dev libjpeg-turbo libjpeg-turbo-dev libpng libpng-dev musl musl-dev
          configure: True
          configure_arg: "--with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/"
        iconv:
          enabled: True
          dependencies: musl musl-dev
        intl:
          enabled: True
          #configure: True
          dependencies: musl musl-dev icu-libs libstdc++
        mysqli:
          enabled: True
          dependencies: libxml2-dev
        mbstring:
          enabled: True
        pdo_mysql:
          enabled: True
          dependencies: libxml2-dev
        mcrypt:
          enabled:
            valueFromCommand: '[ "$BUILD_PHP_VERSION" = "7.2" ] && echo $GENERAL_KEYS_FALSE || echo $GENERAL_KEYS_TRUE'
          dependencies: libmcrypt-dev libltdl
        opcache:
          enabled: True
          dependencies: musl musl-dev
        readline:
          enabled: True
          dependencies: musl-dev libedit-dev
        redis:
          enabled: True
          pecl: True
        xdebug:
          enabled:
            valueFromCommand: '[ "$BUILD_ENV" = "$GENERAL_KEYS_DEV" ] && echo "$GENERAL_KEYS_TRUE" || echo "$GENERAL_KEYS_FALSE"'
          pecl: True
          version:
            valueFromCommand: '[ "$BUILD_PHP_VERSION" = "5.6" ] && echo "-2.5.5" || echo ""'
        soap:
          enabled: True
          dependencies: libxml2-dev
        sodium:
          enabled:
            valueFromCommand: '[ "$BUILD_PHP_VERSION" = "7.2" ] && echo "$GENERAL_KEYS_TRUE" || echo "$GENERAL_KEYS_FALSE"'
          dependencies: libsodium libsodium-dev
        xml:
          enabled: True
          dependencies: libxml2-dev
        zip:
          enabled: True
          dependencies: zlib
          
  # Setup Processes
  processes:

    - title: "List php ext"
      commands:
        - SETUP_PHP_EXTS="$( printenv | grep -e 'SETUP_PHP_EXT_[A-Z_]*_ENABLED=.*' | sed -E 's/SETUP_PHP_EXT_([A-Z_]+?)_ENABLED=.*?/\1/g' | awk '{print tolower($0)}' | xargs )";

    - title: "Install ext if enabled"
      commands:
        - for EXT in $SETUP_PHP_EXTS;
          do
            UPPER_EXT="$(echo "$EXT" | awk '{print toupper($0)}')";
            
            IS_ENABLED="$( echo "\$SETUP_PHP_EXT_${UPPER_EXT}_ENABLED" | envsubst )";
            APK_DEPS="$( echo "\$SETUP_PHP_EXT_${UPPER_EXT}_DEPENDENCIES" | envsubst )"
            NEED_CONFIGURE="$( echo "\$SETUP_PHP_EXT_${UPPER_EXT}_CONFIGURE" | envsubst )";
            IS_PECL="$( echo "\$SETUP_PHP_EXT_${UPPER_EXT}_PECL" | envsubst )";
            
            if [ "$IS_ENABLED" = "$GENERAL_KEYS_TRUE" ]; then
              PHP_EXT_DEP_TO_INSTALL="$PHP_EXT_DEP_TO_INSTALL $APK_DEPS";
              
              if [ "$IS_PECL" = "$GENERAL_KEYS_TRUE" ]; then
                PHP_EXT_PECL_TO_INSTALL="$PHP_EXT_PECL_TO_INSTALL $EXT";
              elif [ "$IS_CUSTOM" = "$GENERAL_KEYS_TRUE" ]; then
                PHP_EXT_CUSTOM="$PHP_EXT_CUSTOM $EXT";
              else
                if [ "$NEED_CONFIGURE" = "$GENERAL_KEYS_TRUE" ]; then
                  PHP_EXT_TO_CONFIGURE="$PHP_EXT_TO_CONFIGURE $EXT";
                fi;
                PHP_EXT_TO_INSTALL="$PHP_EXT_TO_INSTALL $EXT";
              fi
            fi
          done
  
    - title: "Install enabled ext dependencies.."
      shell_condition: ' ! -z "$PHP_EXT_DEP_TO_INSTALL" '
      commands:
        - apk --no-cache add $PHP_EXT_DEP_TO_INSTALL
            
    
    - title: "Configure php ext"
      shell_condition: ' ! -z "$PHP_EXT_TO_CONFIGURE" '
      commands:
        - for EXT in $PHP_EXT_TO_CONFIGURE;
          do
            UPPER_EXT="$(echo "$EXT" | awk '{print toupper($0)}')"
            CONFIGURE_ARG="$( echo "\$SETUP_PHP_EXT_${UPPER_EXT}_CONFIGURE_ARG" | envsubst )";
            echo "### Configuring extension ${EXT} with args ${CONFIGURE_ARG}...";
            docker-php-ext-configure $EXT $CONFIGURE_ARG;
          done
    
    - title: "Install php ext enabled "
      shell_condition: ' ! -z "$PHP_EXT_TO_INSTALL" '
      commands:
        - echo "### Installing extensions ${PHP_EXT_TO_INSTALL}..."
        - docker-php-ext-install $PHP_EXT_TO_INSTALL
        
    - title: "Install php pecl extentions enabled "
      shell_condition: ' ! -z "$PHP_EXT_PECL_TO_INSTALL" '
      commands:
        - for EXT in $PHP_EXT_PECL_TO_INSTALL;
          do
            UPPER_EXT="$(echo "$EXT" | awk '{print toupper($0)}')"
            VERSION="$( echo "\$SETUP_PHP_EXT_${UPPER_EXT}_VERSION" | envsubst )";
            echo "### Installing pecl extension ${EXT}...";
            pecl install "${EXT}${VERSION}";
          done

#
# Config process run just before the entrypoint
#
config:
  # Config env 
  envvars:
    groups:
      main:
        name: 'www-data'
        id: 1082
    users:
      main: 
        name: 'www-data'
        id: 1082
        groups: 'www-data'
    php:
      ext: 
        curl:
          enabled: True
        gd:
          enabled: True
        iconv:
          enabled: True
        intl:
          enabled: False
        mysqli:
          enabled: True
        mbstring:
          enabled: True
        pdo_mysql:
          enabled: True
        mcrypt:
          enabled:
            valueFromCommand: '[ "$BUILD_PHP_VERSION" = "7.2" ] && echo $GENERAL_KEYS_FALSE || echo $GENERAL_KEYS_TRUE'
        opcache:
          enabled: True
        readline:
          enabled: True
        redis:
          enabled: True
        xdebug:
          enabled:
            valueFromCommand: '[ "$BUILD_ENV" = "$GENERAL_KEYS_DEV" ] && echo "$GENERAL_KEYS_TRUE" || echo "$GENERAL_KEYS_FALSE"'
        soap:
          enabled: True
        sodium:
          enabled:
            valueFromCommand: '[ "$BUILD_PHP_VERSION" = "7.2" ] && echo $GENERAL_KEYS_TRUE || echo $GENERAL_KEYS_FALSE'
        xml:
          enabled: True
        zip:
          enabled: True
      paths:
        config:
          php_fpm:
            folder: /usr/local/etc/php-fpm.d
      pool:
        name: www
        user:
          valueFromParse: $CONFIG_USERS_MAIN_NAME
        group:
          valueFromParse: $CONFIG_GROUPS_MAIN_NAME
        listen:
          host: 127.0.0.1
          port: 9000
  processes:
    - title: "Configure php-fpm pool"
      commands:
        # Remove default configuration
        - rm -f ${CONFIG_PATHS_PHP_FPM_FOLDER}/www.conf
        # Create pool configuration
        - POOL_CONF_TEMPLATE="${BUILD_PATHS_TEMPLATES}/pool.conf" 
        - POOL_CONF_TARGET="${CONFIG_PATHS_PHP_FPM_FOLDER}/${CONFIG_PHP_POOL_NAME:-www}.conf"
        - echo "$POOL_CONF_TEMPLATE" > envsubst > "$POOL_CONF_TARGET"
    
    - title: "Enable extensions"
      commands:
        - CONFIG_PHP_EXTS="$( printenv | grep -e 'CONFIG_PHP_EXT_[A-Z_]*_ENABLED=.*' | sed -E 's/CONFIG_PHP_EXT_([A-Z_]+?)_ENABLED=.*?/\1/g' | awk '{print tolower($0)}' | xargs )";
        - for EXT in $CONFIG_PHP_EXTS;
          do
            IS_ENABLED="$( echo "$CONFIG_PHP_EXT_${EXT}_ENABLED" | envsubst)";
            if [ "$IS_ENABLED" = "$GENERAL_KEYS_TRUE" ]; then
              ENABLED_EXTENSIONS="$ENABLED_EXTENSIONS $EXT";
            fi
          done
          
    - title: "Enable extensions"
      shell_condition: ' ! -z "$ENABLED_EXTENSIONS" '
      commands:
        - docker-php-ext-enable $ENABLED_EXTENSIONS
        
    - title: "Print result"
      commands:
        - echo "PHP-FPM Modules installed"
        - php-fpm -m

#
# Testing
#
test:
  processes:
    - title: "Starting container"
      commands:
        - TEST_CONTAINER_ID=$(
            docker run -d 
              -p 127.0.0.1:${TEST_HOST_PORT}:${BUILD_PORTS_MAIN} 
              ${BUILD_USER}/${BUILD_NAME}:${BUILD_VERSION}
          )

    - title: "Testing service every second for 5min as docker-php-ext-enable could request packages from internet slowing down the config"
      commands:
        - SCRIPT_NAME=/test.php
        - SCRIPT_FILENAME=/test.php
        - REQUEST_METHOD=GET
        - CONDITION="cgi-fcgi -bind -connect 127.0.0.1:${TEST_HOST_PORT}"
        - MAX_TRIES=300
        - SECONDS_BETWEEN_TRIES=1
        - c=0
        - while ! eval "$CONDITION"; 
          do 
            if [ $c -ge ${MAX_TRIES} ]; then docker logs $TEST_CONTAINER_ID; exit 1; else c=$(($c + 1)); fi;
            echo "Try $c failed"; 
            sleep ${SECONDS_BETWEEN_TRIES}; 
          done
